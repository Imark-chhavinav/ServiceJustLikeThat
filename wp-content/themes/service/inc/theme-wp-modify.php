<?php

class WPmodify {
	
	/* Custom Response For Mobile Apis */
	
	
	public function response( $success = '', $result = '' , $error = 'No Error Found !' , $Total = NULL , $TotalPage = NULL , $Chat = Null)
	{
		if( $Total != NULL )
		{
			echo json_encode(array( 'success' => $success, 'result'=> $result, 'error' => $error, 'count' => $Total , 'total_page' => $TotalPage ));
			exit;
		}
		else
		{
			if( !empty( $Chat ) )
			{
				echo json_encode(array( 'success' => $success, 'result'=> $result, 'error' => $error, 'UserObj' =>$Chat ));
			exit;
			}
			else
			{
				echo json_encode(array( 'success' => $success, 'result'=> $result, 'error' => $error ));
				exit;
			}			
		}
		
	}
	
	public function web_response( $status = '', $message = '' , $extra = 'No Error Found !' )
	{
		echo json_encode(array( 'status' => $status, 'message'=> $message, 'extra' => $extra ));
		exit;
	}
	
	public function SendEmail($to,$subject,$file,$search,$message,$replace_emp)
	{
		$admin_email = get_option( 'admin_email' ); 
		//$headers 	= array();
		$headers[] 	= 'Content-Type: text/html; charset=UTF-8';
		$headers[] 	= 'From: Admin <'.$admin_email.'>';
		
		$emailBody = file_get_contents($file);
		$emailBodyemp  = str_replace($search, $replace_emp, $emailBody);	
		$mail = wp_mail( $to, $subject, $emailBodyemp, $headers);
		if( $mail )
		{
			return true;
		}
		else
		{
			return false;
		}
	}


	public function UploadImg( $FileData )
	{
		if( isset($FileData) )
		{
			foreach( $FileData as $file):
			//pre( $file );
				if ( ! function_exists( 'wp_handle_upload' ) ) 
				{
				    require_once( ABSPATH . 'wp-admin/includes/file.php' );
				}
					
				if( $file['size'] > 2097152 )
				{

					if(isset($parameters['UpdateProfile_wpnonce']))
					{
						$this->web_response( 'error','Only 2MB Allowed '  ,'File size to large !' );
					}
					else
					{
						$this->response( 0, 'Only 2MB Allowed ' , 'File size to large' );		
					}		
				}



				$types = array('image/jpeg', 'image/gif','image/jpg','image/png','image/*');

				/*if (in_array($file['type'], $types)) 
				{*/
					$uploadedfile = $file;

					$upload_overrides = array( 'test_form' => false );

					$movefile = wp_handle_upload( $uploadedfile, $upload_overrides );

					if ( $movefile && ! isset( $movefile['error'] ) ) 
					{
					   return $more_img = strstr ($movefile['file'], 'wp-content');
					} 
					else 
					{
					    /**
					     * Error generated by _wp_handle_upload()
					     * @see _wp_handle_upload() in wp-admin/includes/file.php
					     */
					    if(isset($parameters['UpdateProfile_wpnonce']))
						{
							$this->web_response( 'error', $movefile['error'] ,'File not uploaded !' );
						}
						else
						{
							$this->response( 0, $movefile['error'] , 'File not uploaded' );			
						}					    
					}
				/*} 
				else 
				{
					if(isset($parameters['UpdateProfile_wpnonce']))
					{
						$this->WPmodify->web_response( 'error', 'Only JPEG,PNG,JPG Allowed' , 'InValid File Format' );
					}
					else
					{
						$this->WPmodify->response( 0, 'Only JPEG,PNG,JPG Allowed' , 'InValid File Format' );			
					}
				}*/

				
			endforeach;
		}
	}

	public function UploadFile( $FileData )
	{
		if( isset($FileData) )
		{
			foreach( $FileData as $file):
				if ( ! function_exists( 'wp_handle_upload' ) ) 
				{
				    require_once( ABSPATH . 'wp-admin/includes/file.php' );
				}
					
				if( $file['size'] > 2097152 )
				{

					if(isset($parameters['UpdateProfile_wpnonce']))
					{
						$this->WPmodify->web_response( 'error','Only 2MB Allowed '  ,'File size to large !' );
					}
					else
					{
						$this->WPmodify->response( 0, 'Only 2MB Allowed ' , 'File size to large' );		
					}		
				}



				/*$types = array('image/jpeg', 'image/gif','image/jpg','image/png','application/msword','application/rtf','application/vnd.ms-excel','application/pdf');

				if (in_array($file['type'], $types)) 
				{*/
					$uploadedfile = $file;

					$upload_overrides = array( 'test_form' => false );

					$movefile = wp_handle_upload( $uploadedfile, $upload_overrides );

					if ( $movefile && ! isset( $movefile['error'] ) ) 
					{
					   return $more_img = strstr ($movefile['file'], 'wp-content');
					} 
					else 
					{
					    /**
					     * Error generated by _wp_handle_upload()
					     * @see _wp_handle_upload() in wp-admin/includes/file.php
					     */
					    if(isset($parameters['UpdateProfile_wpnonce']))
						{
							$this->WPmodify->web_response( 'error', $movefile['error'] ,'File not uploaded !' );
						}
						else
						{
							$this->WPmodify->response( 0, $movefile['error'] , 'File not uploaded' );			
						}					    
					}
				/*} 
				else 
				{
					if(isset($parameters['UpdateProfile_wpnonce']))
					{
						$this->WPmodify->web_response( 'error', 'Only JPEG,PNG,JPG Allowed' , 'InValid File Format' );
					}
					else
					{
						$this->WPmodify->response( 0, 'Only JPEG,PNG,JPG Allowed' , 'InValid File Format' );			
					}
				}*/

				
			endforeach;
		}
	}

	public function createToken( $userID , $userlogin , $deviceToken , $deviceType)
	{
		// device_token, device_type , access_token , created_on , updated_on , user_id

		global $wpdb;
		
		$query = "SELECT * FROM ".$wpdb->prefix."accesstoken WHERE user_id = ".$userID." AND device_token = '".$deviceToken."' ";
		$results = $wpdb->get_row( $query , OBJECT );
		
		$key = time().$userID.$userlogin.$deviceToken.$deviceType;
		$access_token = base64_encode( $key );

		if( empty( $results ) )
		{
			$Data = array(
			'user_id'		=> $userID,
			'device_token' 	=> $deviceToken,
			'device_type' 	=> $deviceType,
			'access_token' 	=> $access_token,
			'created_on'	=> date('d-m-Y H:i:s'),
			'updated_on' 	=> date('d-m-Y H:i:s'),
			);

			$wpdb->insert( $wpdb->prefix.'accesstoken', $Data );
			$wpdb->flush();		
		}
		else
		{
			$Data = array(			
			'device_token' 	=> $deviceToken,
			'device_type' 	=> $deviceType,
			'access_token' 	=> $access_token,			
			'updated_on' 	=> date('d-m-Y H:i:s'),
			);
			$wpdb->update( $wpdb->prefix.'accesstoken', $Data,array( 'id' => $results->id ));
			$wpdb->flush();
		}
		return $access_token;
	}
	
	public function verifyToken()
	{
		global $wpdb;		
		$headers = getallheaders();
		$accesstoken = $headers['authenticate-token'];
		$query = "SELECT * FROM ".$wpdb->prefix."accesstoken WHERE access_token = '$accesstoken' ";
		$results = $wpdb->get_row( $query , OBJECT );		
		if( empty($results) )
		{
			$this->response( 0, NULL , 'Invalid Token' );
		}
				
	}

	public function updateDeviceToken( $DeviceToken , $DveiceType , $USerID )
	{
		global $wpdb;
		$wpdb->update( $wpdb->prefix."profiledetails" , array( 'device_type' =>  $DveiceType , 'device_token' => $DeviceToken ) , array( 'user_id' => $USerID ) );

	}

	public function checkUserType( $userID ,$userType )
	{
		global $wpdb;
		$result = $wpdb->get_results( 'SELECT * FROM '.$wpdb->prefix.'profiledetails WHERE user_id = "'.$userID.'" AND user_type = "'.$userType.'" ' );

		if( empty( $result ) )
		{
			$this->response( 0, NULL, 'Access Denied' );
		}		
	}

	public function checkJobStatus( $userID = NULL , $JobID )
	{
		global $wpdb;
		$results = $wpdb->get_results("SELECT * FROM ".$wpdb->prefix."events WHERE id = '$JobID' ",OBJECT);
		if( !empty( $results ) )
		{
			if( $results[0]->status == '2' || $results[0]->status == '3' )
			{
				$this->response( 0 , NULL , 'Job can\'t be Edit ' );
			}
		}
		else
		{
			$this->response( 0 , NULL , 'Invalid Job ID' );
		}
	}

	public function checkBidStatus( $BidID )
	{
		global $wpdb;
		$results = $wpdb->get_results("SELECT * FROM ".$wpdb->prefix."bids WHERE id = '$BidID' ",OBJECT);
		if( !empty( $results ) )
		{
			if( $results[0]->status == '1' || $results[0]->status == '2' )
			{
				$this->response( 0 , NULL , 'Bid can\'t be Edit ' );
			}
		}
		else
		{
			$this->response( 0 , NULL , 'Invalid BID ' );
		}
	}

	public function checkBidEndDate( $JobID )
	{
		global $wpdb;
		$results = $wpdb->get_results("SELECT * FROM ".$wpdb->prefix."events WHERE id = '$JobID' ",OBJECT);
		if( !empty( $results ) )
		{
			if( $results[0]->bidding_Enddate < date( 'd-m-Y' ) )
			{
				$this->response( 0 , NULL , ' Not Allowed Bidding Last Date gone ' );
			}
		}
		else
		{
			$this->response( 0 , NULL , 'Invalid Job ID' );
		}
	}

	public function PortfolioImage( $files , $userID )
	{
		global $wpdb;

		$success = array();
		$error = array();
		
		foreach( $files as  $file ):

		if ( ! function_exists( 'wp_handle_upload' ) ) 
			{
			    require_once( ABSPATH . 'wp-admin/includes/file.php' );
			}
					
				if( $file['size'] > 2097152 )
				{

					$error[] = array( 'filename'=>$file['name'], 'error'=> 'Only 2MB Allowed' );	
					continue;				
				}


				/*$types = array('image/jpeg', 'image/gif','image/jpg','image/png','image/*');

				if (in_array($file['type'], $types)) 
				{*/
					$uploadedfile = $file;

					$upload_overrides = array( 'test_form' => false );

					$movefile = wp_handle_upload( $uploadedfile, $upload_overrides );

					if ( $movefile && ! isset( $movefile['error'] ) ) 
					{
					   $more_img = strstr ($movefile['file'], 'wp-content');
					   //$success[$file['name']] = $more_img;

					$wpdb->insert( $wpdb->prefix.'portfolio', array( 'image' => $more_img , 'user_id' => $userID ,'created_on'=>date( 'd-m-Y h:i:s' ),'modified_on'=>date( 'd-m-Y h:i:s' ) ) );

					$lastid = $wpdb->insert_id;
					$success[] = array( 'id'=>$lastid,'url'=>site_url($more_img) );

					$wpdb->flush();	
					continue;
					} 
					else 
					{
						$error[] = array( 'filename'=>$file['name'], 'error'=> 'File not uploaded !' );	
					  // $error[$file['name']] = 'File not uploaded !';
						continue;				    				    
					}
				/*} 
				else 
				{
					$error[] = array( 'filename'=>$file['name'], 'error'=> 'Only JPEG,PNG,JPG Allowed' );	
					//$error[$file['name']] = 'Only JPEG,PNG,JPG Allowed';
					continue;			
					
				}	
*/
		endforeach;

		return  json_encode(array('success'=>$success,'error'=>$error) );			
	}

	public function Add_attachment( $Files , $PostID )
	{

		// Handle upload file
			if ( ! function_exists( 'wp_handle_upload' ) ) {
				require_once( ABSPATH . 'wp-admin/includes/file.php' );
			}
			require_once( ABSPATH . 'wp-admin/includes/media.php' );
			$uploadedfile = $Files;

			$upload_overrides = array( 'test_form' => false );

			$movefile = wp_handle_upload( $uploadedfile, $upload_overrides );

			if ( $movefile && !isset( $movefile['error'] ) ) {
				// echo "File is valid, and was successfully uploaded.\n";
				// var_dump( $movefile);
				// $filename should be the path to a file in the upload directory.
				$filename = $movefile['file'];

				// The ID of the post this attachment is for.
				$parent_post_id = $PostID;

				// Check the type of file. We'll use this as the 'post_mime_type'.
				$filetype = wp_check_filetype( basename( $filename ), null );

				// Get the path to the upload directory.
				$wp_upload_dir = wp_upload_dir();

				// Prepare an array of post data for the attachment.
				$attachment = array(
					'guid'           => $wp_upload_dir['url'] . '/' . basename( $filename ), 
					'post_mime_type' => $filetype['type'],
					'post_title'     => preg_replace( '/\.[^.]+$/', '', basename( $filename ) ),
					'post_content'   => '',
					'post_status'    => 'inherit'
				);

				// Insert the attachment.
				$attach_id = wp_insert_attachment( $attachment, $filename, $parent_post_id );
				
				update_field('attachment', $attach_id, $PostID);
				// Make sure that this file is included, as wp_generate_attachment_metadata() depends on it.
				//require_once( ABSPATH . 'wp-admin/includes/image.php' );

				//pre($attach_id);
				// Generate the metadata for the attachment, and update the database record.
				//$attach_data = wp_generate_attachment_metadata( $attach_id, $filename );
				//pre($attach_data);
				//die();
				//wp_update_attachment_metadata( $attach_id, $attach_data );

				// Update File Field

			} 
	}

	public  function distance($lat1, $lon1, $lat2, $lon2, $unit) 
	{

	  $theta = $lon1 - $lon2;
	  $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));
	  $dist = acos($dist);
	  $dist = rad2deg($dist);
	  $miles = $dist * 60 * 1.1515;
	  $unit = strtoupper($unit);

	  if ($unit == "K") {
	    return ($miles * 1.609344);
	  } else if ($unit == "N") {
	      return ($miles * 0.8684);
	    } else {
	        return $miles;
	      }		
	}

	public function profileImage( $userID )
	{
		global $wpdb;
		$result = $wpdb->get_results( 'SELECT profile_image FROM '.$wpdb->prefix.'profiledetails WHERE user_id = "'.$userID.'"',OBJECT );

		if( !empty( $result ) )
		{
			return (empty($result[0]->profile_image))? get_avatar_url( $userID ) :site_url($result[0]->profile_image);
		}
		else
		{
			return "";
		}	

	}

	public function getConversionID( $FromUserID , $ToUserID )
	{
		global $wpdb;		
		
	
		$results = $wpdb->get_results( "SELECT * FROM ".$wpdb->prefix."conversationids WHERE  ( Fromuser_id = '".$FromUserID."' AND Touser_id = '".$ToUserID."' ) OR  ( Fromuser_id = '".$ToUserID."' AND Touser_id = '".$FromUserID."' )  " );
		
	
		if( empty( $results ) )
		{
			echo "inner";
			$Data = array( 
				'Fromuser_id' => $FromUserID ,
				'Touser_id'   => $ToUserID,
				'created_on'   => date( 'd-m-Y h:i:s' )
			 );
			$wpdb->insert( $wpdb->prefix."conversationids" , $Data);
			$ConvID = $wpdb->insert_id;
		}
		else
		{
			$ConvID	= $results[0]->id;
		}
		return $ConvID;
	}

	public function checkConversionStarted( $ConvID )
	{
		global $wpdb;
		$results = $wpdb->get_results( 'SELECT * FROM '.$wpdb->prefix.'message WHERE conv_IDs = "'.$ConvID.'" ' );

		if( !empty( $results ) )
		{
			return '1';
		}
		else
		{
			return '0';
		}

	}

	public function getProfileDetails( $userID )
	{
		global $wpdb;
	
		$results = $wpdb->get_results( 'SELECT id,user_id,first_name,last_name,username,street_address,city,state,postcode,email,title,profile_image,business_name,service_type,overview,user_type,phone_number,push_noti,overview,lat,longs,dob,braintree_ID,business_type,photo_url FROM '.$wpdb->prefix.'profiledetails WHERE user_id ='.$userID, OBJECT );	
		if( !empty( $results ) )
		{
			if( $results[0]->profile_image != NULL )
			{
				if( $results[0]->user_type == 1 ) //customer
				{
					unset( $results[0]->business_name );
					$results[0]->profile_image = site_url('/').$results[0]->profile_image;
				}
				
				if( $results[0]->user_type == 2 ) // provider
				{
					$results[0]->profile_image = site_url('/').$results[0]->profile_image;
				}			
				
			}
			else
			{
				$results[0]->profile_image = get_avatar_url( $userID );
			}
		}
		else
		{
			$results = "";
		}		
		

		return $results;
	}

	public function checkAlreadyBid( $jobID , $userID )
	{
		$args = array(
	            'post_type' => 'bid',
	            'orderby' => 'date',
	            'order' => 'DESC',	            
	            'meta_query'	=> array(
				'relation'		=> 'AND',
					array(
						'key'	 	=> 'select_service_provider',
						'value'	  	=> array( $userID ),
						'compare' 	=> 'IN',						
					),
					array(
						'key'	  	=> 'select_job',
						'value'	  	=> serialize (array(  $jobID ) ),
						'compare' 	=> 'IN',						
					)
				)
			);
       
        $the_query = new WP_Query($args);		
        return $count = $the_query->post_count;       
	}

	public function getTermsArray( $IDs )
	{
		if( !empty( $IDs ) )
		{
			$listing = array();
			$Array = explode( ',' ,$IDs );
			foreach( $Array as $keys ):
				$Details = get_term_by('id', $keys, 'jobs_category');					
				$listing[] = array( "id" => $Details->term_id, "name" =>$Details->name );
			endforeach;
			return $listing;
		}		
	}

	public function getInviteDetails( $inviteID )
	{
		global $wpdb;

		$Results = $wpdb->get_results( "SELECT * FROM ".$wpdb->prefix."invites WHERE id = '".$inviteID."' " );	
		if( !empty( $Results ) )
		{
			return $Results[0];
		}
		else
		{
			$this->response( 0, "", "Invalid Request !");			
		}
	}

	public function getNotificationMessage( $Noti_Type , $username)
	{

		$Noti_Array = array(
			//'apply_for_job' 	=> " $username has applied For Job",
			//'update_job' 		=> " $username has updated his job ",
			//'complete_job' 		=> " $username has marked job as completed ",
			//'invite_for_job' 	=> " $username has invited you for a  Job",
			//'invite_rejected' 	=> " $username has rejected your invite",
			//'update_bid' 		=> " $username has updated his bid",
			//'accept_bid' 		=> " $username has accepted your bid",
			//'rejected_bid' 		=> " $username has rejected your bid",
			'job_progress' 		=> " $username has "
		);
	}

	public function insertNotification( $FromuserID , $TouserID , $notiType , $for_ID = NULL , $message = NULL )
	{
		global $wpdb;

		$Data = array( 
			'noti_type'		=> $notiType,
			'from_userID'	=> $FromuserID,
			'to_userID'		=> $TouserID,
			'for_ID'		=> $for_ID,
			'noti_message'	=> $message,
			'created_on'	=> date( 'd-m-Y h:i a' )
		);

		$wpdb->insert( $wpdb->prefix.'notification' , $Data );
	}

	public function getServiceProviderIdForBids( $JobID )
	{
		global $wpdb;
		
		$JobID = $JobID;

        $args = array(
            'post_type' => 'bid',
            'orderby' => 'date',
            'order' => 'DESC',
            'posts_per_page' => -1,           
			'meta_query'	=> 
   				array(
					array(
					'key' => 'select_job',
					'value' => '"'.$JobID.'"',
					'compare' => 'LIKE'
					),
					array(
					'key' => 'status',
					'value' => array( 0 ),
					'compare' => 'IN'
					),
				)
			);

        $the_query = new WP_Query($args);
        $ServiceProviderIDs = array();       

        if( !empty( $the_query ) ):
	        while( $the_query->have_posts() ) : $the_query->the_post();
	         	$fields = get_fields( get_the_ID() );	        
	        	$ServiceProviderIDs[] = $fields['select_service_provider']['ID'];
	        endwhile;

	    //$this->WPmodify->response( 1, $ServiceProviderIDs);
	        return $ServiceProviderIDs;
	    endif;

	}

	/*public function createPushNotification( $TouserID , $FromuserID , $noti_type , $OtherID = NULL )
	{
		$ToUserID_Details  = get_user_by( 'ID' , $TouserID );
		$ForUserID_Details = get_user_by( 'ID' , $FromuserID );


		$Message = $this->getNotificationMessage( $noti_type , $ToUserID_Details->user_login);

	}
*/
	public function getJobDetails( $jobID )
	{
		global $post;
		$Post_Details = get_post( $jobID );
		$CustomerDetails = get_field( 'customer_name' , $jobID );

		return array( 'job_details' =>$Post_Details , 'customer_details' => $CustomerDetails );
	}

	public function getUserRating( $userID , $UserType , $JobID = NULL )
	{
		global $wpdb;

		$where = '';

		if(  $UserType == 1 )
		{
			$where .=  " ".$wpdb->prefix."contracts.customer_id =  '".$userID."' AND ".$wpdb->prefix."contracts.status = 2 ";
		}

		if(  $UserType == 2 )
		{
			$where .=  " ".$wpdb->prefix."contracts.service_providerID =  '".$userID."' AND ".$wpdb->prefix."contracts.status = 2 ";
		}

		if( $JobID != NULL )
		{
			$where .= " AND ".$wpdb->prefix."contracts.job_id = '$JobID' "; 
		}

		$Results = $wpdb->get_results( "SELECT * FROM ".$wpdb->prefix."contracts INNER JOIN ".$wpdb->prefix."review ON ".$wpdb->prefix."review.job_id = ".$wpdb->prefix."contracts.job_id WHERE ".$where );
		

		if( !empty( $Results ) )
		{
			$Count = 0;
			$rating = 0;					
			
			//pre( $Results );

			foreach( $Results as $keys  ):
				if(  $UserType == 1 )
					{
						$rating += (empty($keys->rating_by_provider))? 0 : $keys->rating_by_provider;

						if( !empty($keys->rating_by_provider) )
						{
							$Count ++;							
						}
					}

				if(  $UserType == 2 )
					{
						
						$rating += (empty($keys->rating_by_cust))? 0 : $keys->rating_by_cust;
						
						if( !empty($keys->rating_by_cust) )
						{
							$Count ++;							
						}
					}

			endforeach;

			if( $rating == 0 && $Count == 0  )
			{
				return  0;
			}
			else
			{
				return  $rating/$Count;
			}
			
			
		}
		else
		{
			return (int) "0";
		}
	}


	public function getJobFeedBack( $userID , $UserType , $JobID )
	{
		global $wpdb;

		$where = '';

		if(  $UserType == 1 )
		{
			$where =  " ".$wpdb->prefix."contracts.customer_id =  '".$userID."' AND ".$wpdb->prefix."contracts.status = 2 ";
		}

		if(  $UserType == 2 )
		{
			$where =  " ".$wpdb->prefix."contracts.service_providerID =  '".$userID."' AND ".$wpdb->prefix."contracts.status = 2 ";
		}

		if( $JobID != NULL )
		{
			$where .= " AND ".$wpdb->prefix."contracts.job_id = '$JobID' "; 
		}

		$Results = $wpdb->get_results( "SELECT * FROM ".$wpdb->prefix."contracts INNER JOIN ".$wpdb->prefix."review ON ".$wpdb->prefix."review.job_id = ".$wpdb->prefix."contracts.job_id WHERE ".$where );
		

		if( !empty( $Results ) )
		{
			$feedback = '';
			foreach( $Results as $keys  ):
				if(  $UserType == 1 )
					{
						 $feedback = $keys->feedback_by_provider;
					}

				if(  $UserType == 2 )
					{						
						$feedback = $keys->feedback_by_cust;
					}
			endforeach;

			return $feedback;
			
		}
		else
		{
			return "";
		}
	}

	public function getWorkHistory( $UserID , $UserType )
	{
		global $wpdb;

		if(  $UserType == 1 )
		{
			$where =  " customer_id =  '".$UserID."' ";
		}

		if(  $UserType == 2 )
		{
			$where =  " service_providerID =  '".$UserID."' ";
		}

		// Job name , rating ,date , 

		$Results = $wpdb->get_results( "SELECT * FROM ".$wpdb->prefix."contracts INNER JOIN ".$wpdb->prefix."review ON ".$wpdb->prefix."review.job_id = ".$wpdb->prefix."contracts.job_id WHERE ".$where );
		 
		$Details = array();
		foreach( $Results  as $keys ):
			//pre($keys);
			$JobName 				= get_the_title( $keys->job_id );
			$JobContent 			= get_post_field( 'post_content' , $keys->job_id );
			$JobID 					= $keys->job_id;
			$rating_by_cust 		= ( empty($keys->rating_by_cust) )? "": $keys->rating_by_cust;
			$rating_by_provider 		= ( empty($keys->rating_by_provider) )? "": $keys->rating_by_provider;
			$CreateDate		 		= ( empty($keys->createdOn) )? "": date( 'M Y' , strtotime( $keys->createdOn ) );
			$CompletedDate		 	= ( empty($keys->modified_on) )? "": date( 'M Y' , strtotime( $keys->modified_on ));

				$Details[] = array(  
					'user_id' 			=> $UserID ,
					'customer_id' 			=> $keys->customer_id ,
					'service_providerID' 			=> $keys->service_providerID ,
					'user_type' 		=> $UserType ,
					'job_name' 			=> $JobName ,
					'job_content' 		=> $JobContent ,
					'job_id' 			=> $JobID,
					'rating_by_cust' 	=> $rating_by_cust ,
					'feedback_by_cust' 	=> $keys->feedback_by_cust ,
					'rating_by_provider'=> $rating_by_provider ,
					'feedback_by_provider'=> $keys->feedback_by_provider ,
					'start_date' 		=> $CreateDate ,
					'end_date' 			=> $CompletedDate
				);
		endforeach;

		return $Details;	
	} 

	public function getSuccessRate($userID)
	{
		global $wpdb;
		$Results = $wpdb->get_results( "SELECT * FROM ".$wpdb->prefix."contracts WHERE service_providerID = '".$userID."' " );

		if( !empty( $Results ) )
		{
			$Total = count( $Results );
			$completed = 0; 
			foreach( $Results as $keys )
			{
				
				if( $keys->status == 2 )
				{
					$completed++;
				}				
			}
			$success = $completed."/".$Total;
			$percent = ( $completed/ $Total) * 100 ;
		}
		else
		{
			$success = "";
			$percent = (int) 0 ;
		}

		return array( 'success_rate' => $success, 'percentage' => $percent );
		
	}

	// Check Payment is complete

	public function CheckPaymentDone( $JOBID , $BIDID )
	{
		global $wpdb;
		$Results = $wpdb->get_results( "SELECT * FROM ".$wpdb->prefix."payment WHERE job_id = '".$JOBID."' AND bid_id = '".$BIDID."' " );

		if( empty( $Results ) )
		{
			$this->response( 0, "", "Please complete the payment process first !");	
		}		

	}

	// Check Payment is already done or not

	public function AlreadyPaid( $JobID , $BidID )
	{
		global $wpdb;
		$Results = $wpdb->get_results( "SELECT * FROM ".$wpdb->prefix."payment WHERE job_id = '".$JobID."' AND bid_id = '".$BidID."' " );

		if( !empty( $Results ) )
		{
			$this->response( 0, "", "Payment is already completed for this Job");	
		}	

	}


	public function sendPushNotification( $UserID,$message , $noti_Type = NULL, $relatedID = NULL , $UserInfo = NULL )
	{
		global $wpdb;
		$Results = $wpdb->get_results( "SELECT * FROM ".$wpdb->prefix."profiledetails WHERE user_id = '".$UserID."' " );

		if( !empty( $Results ) ):
			if( $Results[0]->push_noti == 'yes' ):
			
			//$deviceTypeKey = iOS;	
			$url	= 'https://fcm.googleapis.com/fcm/send';
			$headers = array(
				'Content-Type:application/json',
				'Authorization:key=AAAA0tyL7CU:APA91bF5vDA8aaUCFkmtWXbzHFUZ1r8qCQYrL6qT0HeusytQbOicHmA8VuiBDu-XehAOP-3GT52RqFHjOTl0KcSKWhtN6ZM3nv-ysKqurQ3-D_Y6SWEHZuWps_3-NthtFWA-OqgWFBRO'
			);
			
			$fields = array (
				'to' => $Results[0]->device_token,
				"content_available"  => true,
				"priority" =>  "high",
				'notification' => array
					( 
						"sound"=>  "default",
						"badge"=>  "12",
						'title' => "Service Just Like That ",
						'body' => $message
						/* 'noti_type' => $noti_Type,
						'related_ID' => $relatedID, */
					),
				'data' => array(
					'noti_type' => $noti_Type,
					'related_ID' => $relatedID,
					'UserInfo' => $UserInfo,
				)
			);
			
			$ch = curl_init();
			curl_setopt($ch, CURLOPT_URL, $url);
			curl_setopt($ch, CURLOPT_POST, true);
			curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
			curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
			curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
			$result = curl_exec($ch);
			if ($result === FALSE) {
				die('FCM Send Error: ' . curl_error($ch));
			}
			curl_close($ch);
			return $result;

			endif;
		endif;
	}

	public function getContratsDetails( $JobID )
	{
		global $wpdb;
		$Results = $wpdb->get_results( "SELECT * FROM ".$wpdb->prefix."contracts WHERE job_id = '".$JobID."' " );

		if( !empty( $Results ) )
		{
			return $Results[0];
		}

	}
	
	public function UpdatePostModifiedDate( $PostID )
	{
		global $wpdb;
		$post = array(
			'ID' => $PostID,
			'post_modified_gmt' => date( 'Y:m:d H:i:s' )
		);
		wp_update_post( $post );
	}

	public function InsertAlert( $FromUserID , $ToUserID , $RelatedID , $AlertType )
	{
		// id , from_UserId , to_UserId , related_id , alert_type , is_read , create_on , modified_on
		global $wpdb;
		
		$Insert = $wpdb->insert( $wpdb->prefix."alert" , 
		array( 
		'from_UserId' 	=> $FromUserID,  
		'to_UserId' 	=> $ToUserID,  
		'related_id'	=> $RelatedID,  
		'alert_type' 	=> $AlertType,  
		'is_read' 		=> 0,  
		'create_on' 	=> date('d-m-Y H:i:s'),  
		'modified_on' 	=> date('d-m-Y H:i:s') 
		));
		if( $Insert )
		{
			return true;
		}
		else
		{
			return false;
		}
		
	}
	
	public function getAlert( $JobID , $UserID )
	{
		global $wpdb;
		$Results = $wpdb->get_results( "SELECT * FROM ".$wpdb->prefix."notification WHERE to_userID = '".$UserID."' and for_ID = '".$JobID."' and is_alert = 0 " );
		//pre( $Results );
		if( !empty( $Results ) ):
		 return  count($Results) ;
		else:
		return 0;
		endif;
	}

}

/* $Obj = new WPmodify();
$Obj->sendPushNotification( 158 ,'Hello' , 'invite_id' , 541 );  */ 

/*$Obj = new WPmodify();
$getJobDetails = $Obj->getJobDetails( 696 );
pre( $getJobDetails );*/
